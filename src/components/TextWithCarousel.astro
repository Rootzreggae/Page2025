---
/**
 * TextWithCarousel Component
 * A two-column component with text and image carousel that adapts to image orientation
 */

export interface CarouselImage {
  src: string;
  alt: string;
}

interface Props {
  images: CarouselImage[];
  class?: string;
  reversed?: boolean;
}

const { 
  images = [],
  class: className = "",
  reversed = false 
} = Astro.props;
---

<div class="breakout-container">
  <div class:list={["text-with-carousel", reversed && "reversed", className]}>
    <div class="text-column">
      <slot />
    </div>
    
    <div class="carousel-column">
      <div class="adaptive-carousel">
        <div class="carousel-container">
          {images.map((image, index) => (
            <div class="carousel-slide" data-index={index} data-description={image.alt} style={index === 0 ? "display: flex" : "display: none"}>
              <img src={image.src} alt={image.alt || "Carousel image"} loading="lazy" />
            </div>
          ))}
        </div>
      
      {images.length > 1 && (
        <div class="carousel-controls-bottom">
          <button class="prev-button" aria-label="Previous image">
            <svg width="24" height="24" viewBox="0 0 24 24">
              <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z" />
            </svg>
          </button>
          
          <div class="carousel-info">
            <div class="carousel-description"></div>
            <div class="carousel-indicator">
              <span class="current-slide">1</span>/<span class="total-slides">{images.length}</span>
            </div>
          </div>
          
          <button class="next-button" aria-label="Next image">
            <svg width="24" height="24" viewBox="0 0 24 24">
              <path d="M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12z" />
            </svg>
          </button>
        </div>
      )}
    </div>
  </div>
</div>

<style>
/* Breakout container that completely escapes base layout */
.breakout-container {
  width: 100vw;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  position: relative;
  left: 0;
  right: 0;
  padding: 0;
  box-sizing: border-box;
  margin-top: 2rem;
  margin-bottom: 2rem;
  display: flex;
  justify-content: center;
  overflow-x: hidden;
}

.text-with-carousel {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2rem;
  width: 1280px;
  max-width: none;
  padding: 0 2rem;
  box-sizing: border-box;
  transition: width 0.3s ease;
  min-height: 500px; /* Ensure enough space for vertical centering */
}

.text-with-carousel.reversed {
  grid-template-columns: 1fr 1fr;
  direction: rtl;
}

.text-with-carousel.reversed > * {
  direction: ltr;
}

.text-column {
  display: flex;
  flex-direction: column;
  justify-content: center;
  height: 100%;
  width: 100%;
  max-width: 100%;
}

/* Remove bottom margin from paragraphs in text column */
.text-column p,
.text-with-carousel .text-column p,
.breakout-container .text-with-carousel .text-column p {
  margin-bottom: 0 !important;
  margin-top: 0 !important;
}

/* Add appropriate spacing between other elements */
.text-column h1, .text-column h2, .text-column h3, .text-column h4, .text-column h5, .text-column h6, .text-column ul, .text-column ol {
  margin-bottom: 1rem;
  margin-top: 1rem;
}

/* Only add space between elements, not within paragraphs */
.text-column > * + * {
  margin-top: 1rem;
}

/* Remove inherited margins from list items */
.text-column li {
  margin-bottom: 0.25rem; /* minimal spacing between list items */
}

.carousel-column {
  width: 100%;
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.adaptive-carousel {
  position: relative;
  width: 100%;
  border-radius: 8px;
  overflow: hidden;
}

.carousel-container {
  position: relative;
  width: 100%;
  min-height: 450px;
  display: flex;
}

.carousel-slide {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: none;
  align-items: center;
  justify-content: center;
}

.carousel-slide img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain; /* This ensures the image maintains its aspect ratio */
  display: block;
}

/* Navigation buttons positioned at the edges of the carousel */
.carousel-navigation {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
  pointer-events: none; /* Don't block clicks on the image */
  padding: 0 10px;
}

.prev-button,
.next-button {
  background: white;
  border: none;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
  opacity: 0.9;
  transition: opacity 0.3s, transform 0.3s;
}

.prev-button:hover,
.next-button:hover {
  opacity: 1;
  transform: scale(1.1);
}

.prev-button svg,
.next-button svg {
  fill: #333;
}

/* Bottom controls with navigation and info */
.carousel-controls-bottom {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 1rem;
  padding: 0.5rem;
}

.carousel-info {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  max-width: 70%;
}

.carousel-description {
  font-size: 0.9rem;
  color: #666;
  text-align: right;
}

.carousel-indicator {
  font-size: 0.8rem;
  font-weight: 500;
  color: #888;
  white-space: nowrap;
}

/* Create space below carousel for the dots */
.adaptive-carousel {
  margin-bottom: 10px;
}

@media (max-width: 1350px) {
  .text-with-carousel {
    width: 95vw;
  }
}

@media (max-width: 1200px) {
  .text-with-carousel {
    padding: 0 1rem;
  }
}

@media (max-width: 768px) {
  .text-with-carousel {
    grid-template-columns: 1fr;
    gap: 2rem;
    width: 95vw;
    min-height: auto; /* Allow auto height on mobile */
  }
  
  .breakout-container {
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  .text-with-carousel.reversed {
    grid-template-columns: 1fr;
  }
  
  .carousel-column,
  .text-column {
    height: auto;
    min-height: 300px;
  }
  
  .carousel-container {
    min-height: 300px;
  }
  
  .carousel-controls-bottom {
    padding: 0.25rem;
  }
  
  .carousel-description {
    font-size: 0.8rem;
  }
  
  .carousel-indicator {
    font-size: 0.7rem;
  }
  
  .carousel-info {
    max-width: 60%;
    gap: 0.25rem;
  }
}
</style>

<style is:global>
/* Global styles to ensure MDX content doesn't have unwanted margins */
.breakout-container .text-column p {
  margin: 0 !important;
  padding-bottom: 0 !important;
}

.breakout-container .text-column h2 {
  margin-top: 0 !important;
  margin-bottom: 1rem !important;
}

.breakout-container .text-column ul,
.breakout-container .text-column ol {
  margin-top: 0.5rem !important;
  margin-bottom: 0 !important;
  padding-left: 1.5rem !important;
}

.breakout-container .text-column li {
  margin-bottom: 0.25rem !important;
}

.breakout-container .text-column li:last-child {
  margin-bottom: 0 !important;
}
</style>

<script>
// Adaptive carousel functionality that handles different image orientations
function setupAdaptiveCarousels() {
  const carousels = document.querySelectorAll('.adaptive-carousel');
  
  carousels.forEach(carousel => {
    const slides = Array.from(carousel.querySelectorAll('.carousel-slide'));
    const prevButton = carousel.querySelector('.prev-button');
    const nextButton = carousel.querySelector('.next-button');
    
    if (slides.length === 0) return;
    
    let currentIndex = 0;
    
    // Show the first slide initially
    slides[0].style.display = 'flex';
    
    // Function to detect and adapt to image orientation
    function handleImageOrientation() {
      slides.forEach(slide => {
        const img = slide.querySelector('img');
        if (img && img.complete) {
          adaptToImageFormat(img, slide);
        } else if (img) {
          img.onload = () => adaptToImageFormat(img, slide);
        }
      });
    }
    
    // Adapt container based on image format
    function adaptToImageFormat(img, slide) {
      const container = carousel.querySelector('.carousel-container');
      if (!container) return;
      
      // Reset any previous adjustments
      container.style.height = '';
      
      if (img.naturalWidth > img.naturalHeight) {
        // Landscape image
        slide.classList.add('landscape');
        slide.classList.remove('portrait');
      } else {
        // Portrait image
        slide.classList.add('portrait');
        slide.classList.remove('landscape');
        
        // For portrait images, adjust container height if needed
        const aspectRatio = img.naturalHeight / img.naturalWidth;
        if (aspectRatio > 1.5) { // Very tall portrait
          const width = container.offsetWidth;
          container.style.height = `${width * 1.2}px`; // Limit height for very tall images
        }
      }
    }
    
    function showSlide(index) {
      // Hide all slides
      slides.forEach(slide => slide.style.display = 'none');
      
      // Show the current slide
      slides[index].style.display = 'flex';
      
      // Update indicator
      const currentSlideEl = carousel.querySelector('.current-slide');
      if (currentSlideEl) {
        currentSlideEl.textContent = index + 1;
      }
      
      // Update description
      const descriptionEl = carousel.querySelector('.carousel-description');
      const currentSlide = slides[index];
      if (descriptionEl && currentSlide) {
        const description = currentSlide.getAttribute('data-description');
        descriptionEl.textContent = description || '';
      }
      
      // Adapt to the current image's orientation
      const currentImg = slides[index].querySelector('img');
      if (currentImg) {
        if (currentImg.complete) {
          adaptToImageFormat(currentImg, slides[index]);
        } else {
          currentImg.onload = () => adaptToImageFormat(currentImg, slides[index]);
        }
      }
    }
    
    function nextSlide() {
      currentIndex = (currentIndex + 1) % slides.length;
      showSlide(currentIndex);
    }
    
    function prevSlide() {
      currentIndex = (currentIndex - 1 + slides.length) % slides.length;
      showSlide(currentIndex);
    }
    
    // Add event listeners
    if (prevButton) {
      prevButton.addEventListener('click', prevSlide);
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', nextSlide);
    }
    
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        currentIndex = index;
        showSlide(currentIndex);
      });
    });
    
    // Add keyboard navigation
    carousel.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') prevSlide();
      if (e.key === 'ArrowRight') nextSlide();
    });
    
    // Add touch support
    let touchStartX = 0;
    let touchEndX = 0;
    
    carousel.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    }, { passive: true });
    
    carousel.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      
      const difference = touchStartX - touchEndX;
      const threshold = 50;
      
      if (Math.abs(difference) > threshold) {
        if (difference > 0) {
          nextSlide();
        } else {
          prevSlide();
        }
      }
    }, { passive: true });
    
    // Initialize image orientation handling
    handleImageOrientation();
    
    // Initialize description
    if (slides.length > 0) {
      const descriptionEl = carousel.querySelector('.carousel-description');
      if (descriptionEl) {
        const description = slides[0].getAttribute('data-description');
        descriptionEl.textContent = description || '';
      }
    }
    
    // Handle window resize
    window.addEventListener('resize', handleImageOrientation);
  });
}

// Initialize carousels in different scenarios to ensure they work
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', setupAdaptiveCarousels);
} else {
  setupAdaptiveCarousels();
}

// Also run after a delay to handle hydration scenarios
setTimeout(setupAdaptiveCarousels, 200);
</script>