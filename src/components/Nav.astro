---
import NavLink from './NavLink.astro';
import ThemeToggle from './ThemeToggle.astro';
import siteConfig from '../data/site-config';

interface Props {
    /**
     * Whether this nav is on a page with a hero image
     */
    isOverHero?: boolean;
}

const { isOverHero = false } = Astro.props;
const navLinks = siteConfig.headerNavLinks || [];
---

<nav class:list={[
    'min-h-10 py-4 relative sm:min-h-14 md:pt-6',
    isOverHero ? 'nav-over-hero z-10 absolute w-full left-0 right-0 top-16' : ''
]}>
    <div class="w-full max-w-3xl mx-auto relative flex justify-between items-center px-4 md:px-8">    
        <!-- Brand logo - black square with N -->
        <a href="/" class="brand-logo z-40">
            <div class="w-10 h-10 bg-black rounded-[6px] flex items-center justify-center text-white font-figtree font-medium text-xl">
                N
            </div>
        </a>

        {navLinks.length > 0 && (
            <div class="nav-container relative">
                <button
                    class="menu-toggle w-10 h-10 -mr-1 flex items-center justify-center relative z-40 md:hidden"
                    aria-label="Open Menu"
                    aria-expanded="false"
                    aria-controls="menu-items"
                >
                    <span class="menu-toggle-icon w-6 h-px relative bg-current" />
                </button>
                <ul id="menu-items" class:list={["menu flex gap-6 justify-end w-full", isOverHero ? 'menu-over-hero' : '']}>
                    {navLinks.map((link) => (
                        <li class="py-1">
                            {link.text === 'NILSON GASPAR' ? (
                                <NavLink
                                    class:list={[
                                        "text-xl font-figtree font-bold tracking-wide md:text-base mr-4",
                                        isOverHero ? 'text-white hover:text-white/90' : ''
                                    ]}
                                    href={link.href}
                                >
                                    {link.text}
                                </NavLink>
                            ) : (
                                <NavLink
                                    class:list={[
                                        "text-2xl font-figtree md:text-base mobile-nav-link",
                                        isOverHero ? 'text-white hover:text-white/90' : 'text-main'
                                    ]}
                                    href={link.href}
                                >
                                    {link.text}
                                </NavLink>
                            )}
                        </li>
                    ))}
                </ul>
            </div>
        )}
    </div>
    <!-- Theme toggle is hidden per request -->
    <!-- <div class="absolute right-0 top-4 z-10 md:top-8">
        <ThemeToggle />
    </div> -->
</nav>

<style>
    .nav-over-hero {
        background-color: rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(8px);
        -webkit-backdrop-filter: blur(8px);
    }
    
    @media (max-width: 767px) {
        .menu {
            @apply flex-col gap-6 fixed inset-0 justify-center items-center pt-20 pb-10 z-30 bg-white invisible opacity-0;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }
        
        .menu-over-hero.is-visible {
            @apply bg-black/90;
        }
        
        .menu.is-visible {
            @apply visible opacity-100;
        }
        .menu-toggle {
            @apply absolute right-0;
        }
        .menu-toggle-icon {
            transition: width 0.1s cubic-bezier(0.4, 0, 0.2, 1) 0.3s;
        }
        .menu-toggle.is-active .menu-toggle-icon {
            @apply w-0;
            transition: width 0.1s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .menu-toggle-icon:before,
        .menu-toggle-icon:after {
            @apply w-6 h-px absolute left-1/2 top-0 origin-center -translate-x-1/2 bg-current;
            content: '';
            transition:
                transform 0.2s cubic-bezier(0.4, 0, 0.2, 1),
                margin 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0.2s;
        }
        .menu-toggle-icon:before {
            @apply -mt-1.5;
        }
        .menu-toggle-icon:after {
            @apply mt-1.5;
        }
        .menu-toggle.is-active .menu-toggle-icon:before,
        .menu-toggle.is-active .menu-toggle-icon:after {
            @apply mt-0;
            transition:
                margin 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0.1s,
                transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0.3s;
        }
        .menu-toggle.is-active .menu-toggle-icon:before {
            @apply rotate-45;
        }
        .menu-toggle.is-active .menu-toggle-icon:after {
            @apply -rotate-45;
        }
        
        /* Mobile navigation link effects */
        .mobile-nav-link {
            position: relative;
            display: inline-block;
        }
        
        .mobile-nav-link::after {
            content: '';
            position: absolute;
            width: 0;
            height: 2px;
            bottom: -2px;
            left: 0;
            background-color: currentColor;
            transition: width 0.3s ease;
        }
        
        .mobile-nav-link:hover::after,
        .mobile-nav-link:focus::after {
            width: 100%;
        }
    }
    
    /* Prevent scrolling when menu is open */
    body.menu-open {
        overflow: hidden;
    }
</style>

<script>
    function menuToggle() {
        const menu = document.querySelector('.menu');
        const menuToggleBtn = document.querySelector('.menu-toggle');
        const body = document.body;
        
        menuToggleBtn?.addEventListener('click', () => {
            const isMenuExpanded = menuToggleBtn.getAttribute('aria-expanded') === 'true';
            menuToggleBtn.classList.toggle('is-active');
            menuToggleBtn.setAttribute('aria-expanded', isMenuExpanded ? 'false' : 'true');
            menuToggleBtn.setAttribute('aria-label', isMenuExpanded ? 'Open Menu' : 'Close Menu');
            menu?.classList.toggle('is-visible');
            
            // Toggle body class to prevent scrolling when menu is open
            body.classList.toggle('menu-open');
        });
        
        // Close menu when clicking a link on mobile
        const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
        mobileNavLinks.forEach(link => {
            link.addEventListener('click', () => {
                if (window.innerWidth < 768 && menu?.classList.contains('is-visible')) {
                    menuToggleBtn?.dispatchEvent(new Event('click'));
                }
            });
        });
    }
    
    menuToggle();
    document.addEventListener('astro:after-swap', menuToggle);
    
    // Close menu when resizing from mobile to desktop
    window.addEventListener('resize', () => {
        if (window.innerWidth >= 768) {
            const menu = document.querySelector('.menu');
            const menuToggleBtn = document.querySelector('.menu-toggle');
            if (menu?.classList.contains('is-visible')) {
                menu.classList.remove('is-visible');
                menuToggleBtn?.classList.remove('is-active');
                menuToggleBtn?.setAttribute('aria-expanded', 'false');
                menuToggleBtn?.setAttribute('aria-label', 'Open Menu');
                document.body.classList.remove('menu-open');
            }
        }
    });
</script>
